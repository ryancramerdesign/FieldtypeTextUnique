<?php

/**
 * ProcessWire Unique Text Fieldtype
 *
 * Basic Field that stores text, typically a single line. 
 * Same as FieldtypeText, but requires the value to be globally unique.
 *
 * ProcessWire 2.x 
 * Copyright (C) 2013 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class FieldtypeTextUnique extends FieldtypeText {

	public static function getModuleInfo() {
		return array(
			'title' => 'Text Unique',
			'version' => 100,
			'summary' => 'Same as the Text fieldtype, but enforces that values stored are unique, site-wide.',
			);
	}

	/**
	 * Here we cache the inputfield by "$page-$field" so that we can populate an error message to the right inputfield. 
	 *
	 */
	protected $inputfields = array();

	/**
	 * Return the database schema in specified format
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field); 
		$schema['keys']['data_exact'] = 'UNIQUE `data_exact` (`data`(255))'; 
		return $schema;
	}

	/**
	 * Return the Inputfield used by this Fieldtype
	 *
	 */
	public function getInputfield(Page $page, Field $field) {
		if(isset($this->inputfields["$page-$field"])) return $this->inputfields["$page-$field"]; 
		$inputfield = parent::getInputfield($page, $field); 
		$this->inputfields["$page-$field"] = $inputfield;
		return $inputfield; 
	}

	/**
	 * Save the given field from page 
	 *
	 * Unlike the regular Fieldtype::savePageField, this one performs a dedicated INSERT or UPDATE
	 * rather than an ON DUPLICATE KEY query. This enables errors for UNIQUE indexes to come through.
	 *
	 * @param Page $page Page object to save. 
	 * @param Field $field Field to retrieve from the page. 
	 * @return bool True on success, false on DB save failure.
	 *
	 */
	public function ___savePageField(Page $page, Field $field) {

		if(!$page->id || !$field->id) return false;
		if(!$page->isChanged($field->name)) return true;
		$value = $page->get($field->name);

		// if the value is the same as the default, then remove the field from the database because it's redundant
		if($value === $this->getDefaultValue($page, $field)) return $this->deletePageField($page, $field);

		$database = wire('database');
		
		$value  = $database->escapeStr($this->sleepValue($page, $field, $value));
		$pageID = (int) $page->id;
		$table  = $database->escapeTable($field->table);

		$stmnt  = $database->query("SELECT COUNT(*) FROM `$table` WHERE pages_id=$pageID"); 
		$exists = ((int) $stmnt->fetchColumn(0) > 0);

		$sql = $exists
			? "UPDATE `$table` SET data='$value' WHERE pages_id=$pageID"
			: "INSERT INTO `$table` (pages_id, data) VALUES($pageID, '$value')"
		;

		$result = false;

		try {
			$result = $database->exec($sql);
		} catch(Exception $e) {
			$error = sprintf($this->_('Value "%s" is already in use on another page.'), wire('sanitizer')->entities($page->get($field->name))); 
			$inputfield = $this->getInputfield($page, $field);
			$inputfield->error($error); 
		}

		return $result;

	}	
}

